[{"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\index.js":"1","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\App.js":"3","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\NavBar.js":"4","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\PostDetails.js":"5","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\PostForm.js":"6","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\PostList.js":"7","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\PostCard.js":"8","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\samplePosts.js":"9","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\Home.js":"10","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\CommentSection.js":"11","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\sampleComments.js":"12","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\Comment.js":"13","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\CommentForm.js":"14","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\rootReducer.js":"15","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\actions.js":"16","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\actionTypes.js":"17","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\helpers.js":"18","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\LoginForm.js":"19","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\SignupForm.js":"20","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\UserDetails.js":"21"},{"size":1009,"mtime":1611943585003,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":1053,"mtime":1612118758784,"results":"25","hashOfConfig":"23"},{"size":2897,"mtime":1612118749118,"results":"26","hashOfConfig":"23"},{"size":2729,"mtime":1611973306883,"results":"27","hashOfConfig":"23"},{"size":3510,"mtime":1611949691576,"results":"28","hashOfConfig":"23"},{"size":569,"mtime":1611947033229,"results":"29","hashOfConfig":"23"},{"size":793,"mtime":1611949830098,"results":"30","hashOfConfig":"23"},{"size":2185,"mtime":1611777700055,"results":"31","hashOfConfig":"23"},{"size":1618,"mtime":1612116278864,"results":"32","hashOfConfig":"23"},{"size":534,"mtime":1611945631768,"results":"33","hashOfConfig":"23"},{"size":956,"mtime":1611779214655,"results":"34","hashOfConfig":"23"},{"size":3376,"mtime":1611954716891,"results":"35","hashOfConfig":"23"},{"size":2288,"mtime":1611948746613,"results":"36","hashOfConfig":"23"},{"size":3976,"mtime":1612116220546,"results":"37","hashOfConfig":"23"},{"size":4989,"mtime":1612118189160,"results":"38","hashOfConfig":"23"},{"size":710,"mtime":1612115048522,"results":"39","hashOfConfig":"23"},{"size":559,"mtime":1612118983328,"results":"40","hashOfConfig":"23"},{"size":2962,"mtime":1612114431786,"results":"41","hashOfConfig":"23"},{"size":3496,"mtime":1612115302009,"results":"42","hashOfConfig":"23"},{"size":393,"mtime":1612119044581,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1ht4hy3",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\index.js",[],["90","91"],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\App.js",[],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\NavBar.js",["92"],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\PostDetails.js",[],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\PostForm.js",[],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\PostList.js",[],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\PostCard.js",[],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\samplePosts.js",[],["93","94"],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\Home.js",[],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\CommentSection.js",[],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\sampleComments.js",[],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\Comment.js",["95"],"import {\r\n    Card,\r\n    CardBody,\r\n    CardSubtitle,\r\n    CardText,\r\n    Button,\r\n    Input\r\n} from 'reactstrap';\r\nimport { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeComment, editComment } from './actions';\r\nimport './Comment.css';\r\n\r\nconst Comment = ({ comment }) => {\r\n    const [shiftPressed, setShiftPressed] = useState(false);\r\n    const [editing, setEditing] = useState(false);\r\n    const [commentText, setCommentText] = useState(comment.body);\r\n    const dispatch = useDispatch();\r\n\r\n    const startEdit = () => setEditing(true);\r\n    const cancelEdit = () => {\r\n        setCommentText(comment.body);\r\n        setEditing(false);\r\n    }\r\n    const saveEdit = () => {\r\n        // dispatch(editComment(id, commentText));\r\n        // setEditing(false);\r\n    }\r\n    const deleteComment = () => dispatch(removeComment(comment._id));\r\n    const handleChange = (evt) => {\r\n        if (evt.nativeEvent.inputType !== 'insertLineBreak') setCommentText(evt.target.value);\r\n        else if (shiftPressed) setCommentText(`${commentText}\\n`);\r\n    }\r\n    const shiftDown = (evt) => { if (evt.key === 'Shift') setShiftPressed(true) }\r\n    const shiftUp = (evt) => { if (evt.key === 'Shift') setShiftPressed(false) }\r\n    const enterComment = (evt) => { if (!shiftPressed && (evt.key === 'Enter' || evt.key === 'Return')) saveEdit() }\r\n\r\n    const text = comment.body.split('\\n');\r\n\r\n    return (\r\n        <div className=\"Comment\" onKeyDown={shiftDown} onKeyUp={shiftUp}>\r\n            <Card>\r\n                <CardBody>\r\n                    <div className=\"Comment-titles\">\r\n                        <div>\r\n                            <CardSubtitle tag=\"h6\">User id {comment.userId}</CardSubtitle>\r\n                        </div>\r\n                        {editing ? (\r\n                            <div className=\"Comment-button-container\">\r\n                                <Button className=\"Comment-button\" outline color=\"primary\" size=\"sm\" onClick={saveEdit}>Save</Button>\r\n                                <Button className=\"Comment-button\" outline color=\"danger\" size=\"sm\" onClick={cancelEdit}>Cancel</Button>\r\n                            </div>\r\n                        ) : (\r\n                                <div className=\"Comment-button-container\">\r\n                                    <Button className=\"Comment-button\" outline color=\"primary\" size=\"sm\" onClick={startEdit}>Edit</Button>\r\n                                    <Button className=\"Comment-button\" outline color=\"danger\" size=\"sm\" onClick={deleteComment}>Delete</Button>\r\n                                </div>\r\n                            )}\r\n                    </div>\r\n                    {editing ? (\r\n                        <div className=\"Comment-input\">\r\n                            <CardText>\r\n                                <Input type=\"textarea\" name=\"commentText\" autoComplete=\"off\" placeholder=\"Add a comment\" value={commentText} onChange={handleChange} onKeyPress={enterComment} />\r\n                            </CardText>\r\n                        </div>\r\n                    ) : (\r\n                            <div>\r\n                                {text.map(p => <CardText>{p}</CardText>)}\r\n                            </div>\r\n                        )}\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comment;","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\CommentForm.js",[],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\rootReducer.js",["96"],"import sampleComments from './sampleComments';\r\nimport {\r\n    ADD_COMMENT,\r\n    DELETE_COMMENT,\r\n    DELETE_POST,\r\n    EDIT_COMMENT,\r\n    ADD_POST,\r\n    EDIT_POST,\r\n    LOAD_POSTS,\r\n    LOAD_POST,\r\n    CLEAR_CURRENT_POST,\r\n    LOGIN,\r\n    LOGOUT,\r\n    LOGIN_ERROR,\r\n    REGISTER_ERROR\r\n} from './actionTypes';\r\nimport { findItem, findIndex } from './helpers';\r\n\r\nconst storageUser = localStorage.getItem('currentUser');\r\nconst currentUser = storageUser ? JSON.parse(storageUser) : null;\r\nconst INITIAL_STATE = {\r\n    posts: [],\r\n    currentPost: null,\r\n    loggedInUser: currentUser,\r\n    loginError: false,\r\n    registerError: null,\r\n    comments: sampleComments\r\n};\r\n\r\nconst rootReducer = (state = INITIAL_STATE, action) => {\r\n    const posts = [ ...state.posts ];\r\n    const currentPost = state.currentPost ? { ...state.currentPost } : null;\r\n    const comments = { ...state.comments };\r\n\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            localStorage.setItem('currentUser', JSON.stringify(action.payload.user));\r\n            return {\r\n                ...state,\r\n                loggedInUser: { ...action.payload.user },\r\n                loginError: false,\r\n                registerError: null\r\n            };\r\n        case LOGOUT:\r\n            localStorage.removeItem('currentUser');\r\n            return {\r\n                ...state,\r\n                loggedInUser: null\r\n            };\r\n        case LOGIN_ERROR:\r\n            return {\r\n                ...state,\r\n                loginError: true\r\n            };\r\n        case REGISTER_ERROR:\r\n            return {\r\n                ...state,\r\n                registerError: action.payload.message\r\n            };\r\n        case LOAD_POST:\r\n            const newCurrentPost = { ...action.payload.currentPost };\r\n            newCurrentPost.bannerImage = newCurrentPost.banner_image;\r\n            delete newCurrentPost.banner_image;\r\n            return {\r\n                ...state,\r\n                currentPost: newCurrentPost\r\n            };\r\n        case LOAD_POSTS:\r\n            const newPosts = [ ...action.payload.posts ];\r\n            for (let post of newPosts) {\r\n                post.bannerImage = post.banner_image;\r\n                delete post.banner_image;\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: newPosts\r\n            };\r\n        case ADD_POST:\r\n            const newPost = action.payload.post;\r\n            return {\r\n                ...state,\r\n                posts: {\r\n                    ...posts,\r\n                    [action.payload.id]: newPost\r\n                }\r\n            };\r\n        case EDIT_POST:\r\n            const editedPost = action.payload.post;\r\n            return {\r\n                ...state,\r\n                posts: {\r\n                    ...posts,\r\n                    [action.payload.id]: editedPost\r\n                }\r\n            };\r\n        case DELETE_POST:\r\n            delete posts[action.payload.id];\r\n            return {\r\n                ...state,\r\n                posts: posts\r\n            };\r\n        case CLEAR_CURRENT_POST:\r\n            return {\r\n                ...state,\r\n                currentPost: null\r\n            };\r\n        case ADD_COMMENT:\r\n            const newComment = action.payload.comment;\r\n            currentPost.comments.push(newComment);\r\n            return {\r\n                ...state,\r\n                currentPost: currentPost\r\n            };\r\n        case EDIT_COMMENT:\r\n            comments[action.payload.id].body = action.payload.body;\r\n            return {\r\n                ...state,\r\n                comments: comments\r\n            };\r\n        case DELETE_COMMENT:\r\n            const idx = findIndex(action.payload.id, currentPost.comments);\r\n            currentPost.comments.splice(idx, 1);\r\n            return {\r\n                ...state,\r\n                currentPost: currentPost\r\n            };\r\n        default:\r\n            return { ...state };\r\n    }\r\n}\r\n\r\nexport default rootReducer;","C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\actions.js",[],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\actionTypes.js",[],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\helpers.js",[],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\LoginForm.js",[],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\SignupForm.js",[],"C:\\Users\\Owner\\Desktop\\Projects\\syndicalt-blog-frontend\\src\\UserDetails.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":16,"column":22,"nodeType":"103","messageId":"104","endLine":16,"endColumn":26},{"ruleId":"97","replacedBy":"105"},{"ruleId":"99","replacedBy":"106"},{"ruleId":"101","severity":1,"message":"107","line":11,"column":25,"nodeType":"103","messageId":"104","endLine":11,"endColumn":36},{"ruleId":"101","severity":1,"message":"108","line":17,"column":10,"nodeType":"103","messageId":"104","endLine":17,"endColumn":18},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar",["109"],["110"],"'editComment' is defined but never used.","'findItem' is defined but never used.","no-global-assign","no-unsafe-negation"]